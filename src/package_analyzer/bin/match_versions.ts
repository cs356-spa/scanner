import { promises as fs } from "fs";
import { matchBundleWithPackageVersionStrings, PackageStringsByVersionMapWithInfo } from "../packageUtils";

const USAGE = `Output number of matched strings on different package versions inside of a bundle.
Usage:

$ ts-node match_versions.ts [bundlePath] [pathToVersionStrings]
[bundlePath] is the path to the bundle file. [pathToVersionStrings] is the path to the JSON file generated by running \`collect_version_strings.ts\`

# Example
$ ts-node match_versions.ts ./my_bundle.js ./react_strings.json
`;

function logUsageAndExit() {
  console.log(USAGE);
  process.exit(1);
}

if (process.argv.length < 4) {
  logUsageAndExit();
}

const bundlePath = process.argv[2];
const versionStringsPath = process.argv[3];

async function main(): Promise<void> {
  const versionStringsContent = await fs.readFile(versionStringsPath, "utf8");
  const versionStrings: PackageStringsByVersionMapWithInfo = JSON.parse(versionStringsContent);
  const bundleContent = await fs.readFile(bundlePath, "utf8");
  console.log(await matchBundleWithPackageVersionStrings(bundleContent, versionStrings.versions));
}

main().catch(console.error);

/**
 * Basic testing result:
 * Using vendors~app.js from root.treehacks.com, testing on moment.js using `moment_strings.json`,
 * generated by running `ts-node collect_version_strings.ts moment 2.29,2.25,2.20,2.15,2.10,2.5,2.0,1.5 ./moment_strings.json`. The result goes as:
 * (The actual version, according to the bundle, is actually "2.22.2". Therefore, the ones with most matches is actually close enough.)
{
  '1.5': 5,
  '2.0': 8,
  '2.5': 10,
  '2.10': 20,
  '2.15': 26,
  '2.20': 30,
  '2.25': 31,
  '2.29': 31
}
 */